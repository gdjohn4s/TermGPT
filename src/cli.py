from src.engine import _config_path, _CONFIG_FILE
from src.ui.termgptUI import TermGPTUi
from src.engine.termgpt import TermGPT
from rich.console import Console
from src._info import CLI_HEADER
from enum import Enum
import argparse
import yaml


class CliState(Enum):
    # TODO: change state to cli application
    STARTED = 0
    EXECUTION = 1
    LOADING = 2
    ERROR = 3
    STOPPED = 4


class Args:
    """Class containing constant arguments for CLI commands."""

    SETAPIKEY = "setkey"
    PROMPT = "prompt"
    GUI = "gui"


class Cli:
    """A command-line interface (CLI) tool for interacting with TermGPT.

    This class provides functionality to set API key, prompt ChatGPT, or use a GUI.

    Attributes:
        parser (argparse.ArgumentParser): The main argument parser.
        subparsers (argparse._SubParsersAction): Subparsers for different commands.
    """

    console = Console()

    def __init__(self):
        """Initializes the CLI tool with argument parsers and subparsers."""
        print(CLI_HEADER)
        self.parser = argparse.ArgumentParser(
            description="TermGPT tool made by gdjohn4s."
        )
        self.subparsers = self.parser.add_subparsers(dest="command")
        self._add_subparsers()

    def _add_subparsers(self):
        """Private method to add specific command subparsers."""

        # Set api key
        set_api_key = self.subparsers.add_parser(
            Args.SETAPIKEY, help="set openai api key"
        )
        set_api_key.add_argument(
            "api_key", type=str, help="the api key generated by open ai."
        )
        set_api_key.set_defaults(func=self.set_key)

        # Gui command
        spawn_gui = self.subparsers.add_parser(Args.GUI, help="use Gui instead")
        spawn_gui.set_defaults(func=self.gui)

        # Ask chatgpt
        ask_gpt = self.subparsers.add_parser(Args.PROMPT, help="Ask chatgpt something")
        ask_gpt.add_argument("prompt", type=str, help="prompt to send to chatgpt")
        ask_gpt.set_defaults(func=self.ask_gpt)

    def set_key(self, args: argparse.Namespace):
        """Set the OpenAI API key in the configuration.

        Args:
            args (argparse.Namespace): Contains the api_key attribute.
        """
        with open(f"{_config_path}/{_CONFIG_FILE}", "r") as nc:
            new_config = yaml.safe_load(nc)
            self.console.print(
                f"File {_CONFIG_FILE} opened [green]Successfully[/green]"
            )

        new_config["termGPT"]["api_key"] = args.api_key

        with open(f"{_config_path}/{_CONFIG_FILE}", "w") as nc:
            yaml.dump(new_config, nc, default_flow_style=False)
            self.console.print(f"Api key [green]imported[/green]")

    def ask_gpt(self, args: argparse.Namespace):
        """Prompt ChatGPT and display the response.

        Args:
            args (argparse.Namespace): Contains the prompt attribute.
        """
        gpt = TermGPT()
        response = gpt.run(args.prompt)
        parsed_response = gpt.parse_chat_content(response)
        self.console.print("TermGPT: ", end="", style="green")
        gpt.simulate_typing(parsed_response)
        exit(0)

    def gui(self, args):
        """Run the GUI version of TermGPT."""
        term_gui = TermGPTUi()
        term_gui.run()

    def run(self):
        """Parse the arguments and execute the corresponding command."""
        args = self.parser.parse_args()
        if args.command is None:
            self.parser.print_help()
        else:
            args.func(args)
